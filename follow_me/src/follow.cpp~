#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <geometry_msgs/Twist.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

int main(int argc, char** argv){
 ros::init(argc, argv, "follow_navigation_goals");

    ros::NodeHandle node;


 //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);

  //wait for the action server to come up
    while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  } 

  tf::TransformListener listener;

  ros::Rate rate(1.0);

    tf::StampedTransform transformL;
    tf::StampedTransform transformR;
    
    	listener.waitForTransform("/base_link", "/left_knee_1",
    	                          ros::Time(0), ros::Duration(3.0));

    	listener.lookupTransform("/base_link", "/left_knee_1",
    	                                       ros::Time(0), transformL);
ROS_INFO("Hi ");

//Calculation of the middle between knees

tfScalar tfY = transformL.getOrigin().y() ;
ROS_INFO("y: %f",tfY);
tfScalar tfX = transformL.getOrigin().x() ;

ROS_INFO("x: %f",tfX);

//set a security offset from the person

tfScalar secOff = 1.0; //meter

tf::Quaternion rot;
geometry_msgs::Quaternion rot2;

rot = transformL.getRotation(); 

tf::quaternionTFToMsg(rot,rot2);

 move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "base_link";
  goal.target_pose.header.stamp = ros::Time::now();

  goal.target_pose.pose.position.x = tfX - secOff;
  goal.target_pose.pose.position.y = tfY;
  goal.target_pose.pose.orientation.w = 1;

  
  //ROS_INFO("Sending goal to: x= %f y= %f", goal.target_pose.pose.position.x, goal.target_pose.pose.position.y);   

  ROS_INFO("Sending goal");
  ac.sendGoal(goal);

  ac.waitForResult();

  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
    ROS_INFO("Hooray, the base moved 1 meter forward");
  else
    ROS_INFO("The base failed to move forward 1 meter for some reason");


  return 0;

}
/*
typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

int main(int argc, char** argv){
  ros::init(argc, argv, "simple_navigation_goals");

  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);

  //wait for the action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  }

  move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "base_link";
  goal.target_pose.header.stamp = ros::Time::now();

  goal.target_pose.pose.position.x = 1.0;
  //goal.target_pose.pose.orientation.w = 1.0;

  ROS_INFO("Sending goal");
  ac.sendGoal(goal);

  ac.waitForResult();

  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
    ROS_INFO("Hooray, the base moved 1 meter forward");
  else
    ROS_INFO("The base failed to move forward 1 meter for some reason");

  return 0;
}*/
